// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum CompanyStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  LEAD
  CUSTOMER
  FORMER
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
  ORGANIZATION
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String
  lastName    String
  password    String
  role        UserRole  @default(EMPLOYEE)
  status      UserStatus @default(PENDING)
  avatar      String?
  phone       String?
  timezone    String    @default("UTC")
  lastLoginAt DateTime?
  emailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  
  // Company relationship
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Lead assignments
  assignedLeads Lead[] @relation("AssignedLeads")
  
  // Audit logs
  auditLogs AuditLog[]
  
  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("users")
}

model Company {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  email       String?
  phone       String?
  website     String?
  logo        String?
  description String?
  industry    String?
  size        String?       // "1-10", "11-50", "51-200", "201-500", "500+"
  country     String?
  state       String?
  city        String?
  address     String?
  zipCode     String?
  
  // Business details
  taxId       String?
  currency    String        @default("USD")
  timezone    String        @default("UTC")
  fiscalYearStart Int       @default(1) // Month (1-12)
  
  // Subscription details
  status      CompanyStatus @default(TRIAL)
  plan        SubscriptionPlan @default(FREE)
  planStartedAt DateTime?
  planExpiresAt DateTime?
  maxUsers    Int           @default(2)
  
  // Settings
  settings    Json?         // JSON object for various settings
  
  // Relationships
  users       User[]
  customers   Customer[]
  leads       Lead[]
  accounts    Account[]
  transactions Transaction[]
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("companies")
}

model Customer {
  id          String        @id @default(cuid())
  companyId   String
  name        String
  type        CustomerType  @default(COMPANY)
  status      CustomerStatus @default(ACTIVE)
  email       String?
  phone       String?
  website     String?
  
  // Address information
  address     Json?         // JSON object for address details
  
  // Business information
  industry    String?
  size        String?       // "1-10", "11-50", "51-200", "201-500", "500+"
  annualRevenue Decimal?    @db.Decimal(15, 2)
  
  // Additional information
  notes       String?
  tags        String[]      // Array of tags for categorization
  
  // Relationships
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("customers")
}

model Contact {
  id          String    @id @default(cuid())
  customerId  String
  firstName   String
  lastName    String
  email       String?
  phone       String?
  role        String?       // "CEO", "Manager", "Contact", etc.
  isPrimary   Boolean       @default(false)
  
  // Additional information
  notes       String?
  
  // Contact activity tracking
  lastContactedAt DateTime?
  contactFrequency String?  // "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "YEARLY"
  
  // Relationships
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  communications ContactCommunication[]
  activities  ContactActivity[]
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("contacts")
}

// Contact communication history
model ContactCommunication {
  id          String    @id @default(cuid())
  contactId   String
  type        CommunicationType
  subject     String?
  content     String?
  direction   CommunicationDirection
  status      CommunicationStatus @default(SENT)
  
  // Communication details
  channel     String?       // "EMAIL", "PHONE", "SMS", "MEETING", "OTHER"
  duration    Int?          // Duration in minutes (for calls/meetings)
  scheduledAt DateTime?     // For scheduled communications
  
  // Relationships
  contact     Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("contact_communications")
}

// Contact activity tracking
model ContactActivity {
  id          String    @id @default(cuid())
  contactId   String
  activityType ActivityType
  description String?
  metadata    Json?     // Additional activity data
  
  // Relationships
  contact     Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt   DateTime      @default(now())
  createdBy   String?

  @@map("contact_activities")
}

// Lead Management System
model Lead {
  id          String    @id @default(cuid())
  companyId   String
  name        String
  email       String
  phone       String?
  website     String?
  
  // Lead details
  source      LeadSource   @default(WEBSITE)
  status      LeadStatus   @default(NEW)
  score       Int          @default(0) // Lead scoring (0-100)
  
  // Business information
  company     String?      // Company name if different from contact name
  industry    String?
  size        String?      // "1-10", "11-50", "51-200", "201-500", "500+"
  annualRevenue Decimal?   @db.Decimal(15, 2)
  
  // Assignment and tracking
  assignedTo  String?      // User ID
  assignedAt  DateTime?
  lastContactedAt DateTime?
  
  // Additional information
  notes       String?
  tags        String[]     // Array of tags for categorization
  
  // Conversion tracking
  convertedToCustomerId String? // Customer ID if converted
  convertedAt DateTime?
  
  // Relationships
  company_ref Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assignedUser User?        @relation("AssignedLeads", fields: [assignedTo], references: [id])
  opportunities Opportunity[]
  activities   LeadActivity[]
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("leads")
}

// Lead opportunities (sales pipeline)
model Opportunity {
  id          String    @id @default(cuid())
  leadId      String
  title       String
  description String?
  amount      Decimal?  @db.Decimal(15, 2)
  stage       OpportunityStage @default(PROSPECTING)
  probability Int       @default(10) // 0-100 percentage
  
  // Timeline
  expectedCloseDate DateTime?
  actualCloseDate DateTime?
  
  // Additional information
  notes       String?
  tags        String[]
  
  // Relationships
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("opportunities")
}

// Lead activity tracking
model LeadActivity {
  id          String    @id @default(cuid())
  leadId      String
  activityType LeadActivityType
  description String?
  metadata    Json?     // Additional activity data
  
  // Relationships
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt   DateTime    @default(now())
  createdBy   String?

  @@map("lead_activities")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  action    String   // "CREATE", "UPDATE", "DELETE", "LOGIN", etc.
  entity    String   // "User", "Company", "Contact", etc.
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("sessions")
}

enum CommunicationType {
  EMAIL
  PHONE_CALL
  SMS
  MEETING
  NOTE
  TASK
  OTHER
}

enum CommunicationDirection {
  INBOUND
  OUTBOUND
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
  SCHEDULED
}

enum ActivityType {
  VIEWED
  UPDATED
  CONTACTED
  EMAIL_OPENED
  EMAIL_CLICKED
  PHONE_CALL_MADE
  PHONE_CALL_RECEIVED
  MEETING_SCHEDULED
  MEETING_COMPLETED
  NOTE_ADDED
  TASK_CREATED
  TASK_COMPLETED
  OTHER
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  PHONE_CALL
  TRADE_SHOW
  CONFERENCE
  PARTNER
  COLD_OUTREACH
  ADVERTISING
  SEARCH_ENGINE
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  CONVERTED
  LOST
  DISQUALIFIED
}

enum OpportunityStage {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum LeadActivityType {
  CREATED
  CONTACTED
  QUALIFIED
  LOST
  REASSIGNED
  EMAIL_SENT
  PHONE_CALL
  OTHER
  CALL
  EMAIL
  MEETING_SCHEDULED
  MEETING_COMPLETED
  PROPOSAL_SENT
  PROPOSAL_ACCEPTED
  PROPOSAL_REJECTED
  FOLLOW_UP
  NOTE_ADDED
  STATUS_CHANGED
  SCORE_UPDATED
  ASSIGNED
  CONVERTED
}

// Chart of Accounts Enums
enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AccountCategory {
  // Assets
  CURRENT_ASSETS
  FIXED_ASSETS
  INTANGIBLE_ASSETS
  OTHER_ASSETS
  
  // Liabilities
  CURRENT_LIABILITIES
  LONG_TERM_LIABILITIES
  OTHER_LIABILITIES
  
  // Equity
  OWNERS_EQUITY
  RETAINED_EARNINGS
  COMMON_STOCK
  PREFERRED_STOCK
  
  // Revenue
  OPERATING_REVENUE
  NON_OPERATING_REVENUE
  OTHER_REVENUE
  
  // Expenses
  COST_OF_GOODS_SOLD
  OPERATING_EXPENSES
  ADMINISTRATIVE_EXPENSES
  MARKETING_EXPENSES
  RESEARCH_AND_DEVELOPMENT
  OTHER_EXPENSES
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// Chart of Accounts Model
model Account {
  id          String        @id @default(cuid())
  companyId   String
  name        String
  code        String        // Account code (e.g., "1000", "1100", "2000")
  type        AccountType
  category    AccountCategory
  status      AccountStatus @default(ACTIVE)
  description String?
  
  // Balance information
  balance     Decimal       @default(0) @db.Decimal(15, 2)
  openingBalance Decimal    @default(0) @db.Decimal(15, 2)
  
  // Hierarchy
  parentId    String?
  parent      Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    Account[]     @relation("AccountHierarchy")
  
  // Account settings
  isSystem    Boolean       @default(false) // System accounts cannot be deleted
  isReconcilable Boolean    @default(true)  // Can be reconciled
  isTaxable   Boolean       @default(false) // Subject to tax calculations
  
  // Relationships
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  // Audit fields
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  updatedBy   String?

  @@unique([companyId, code])
  @@map("accounts")
}

// Transaction Model for basic transaction tracking
model Transaction {
  id          String    @id @default(cuid())
  companyId   String
  accountId   String
  type        String    // "DEBIT" or "CREDIT"
  amount      Decimal   @db.Decimal(15, 2)
  description String?
  reference   String?   // External reference number
  date        DateTime  @default(now())
  
  // Transaction details
  category    String?   // Transaction category
  tags        String[]  // Array of tags for categorization
  
  // Relationships
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // Audit fields
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("transactions")
}